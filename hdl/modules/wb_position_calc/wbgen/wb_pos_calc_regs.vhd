---------------------------------------------------------------------------------------
-- Title          : Wishbone slave core for Position Calculation Core registers
---------------------------------------------------------------------------------------
-- File           : wb_pos_calc_regs.vhd
-- Author         : auto-generated by wbgen2 from wb_pos_calc_regs.wb
-- Created        : Thu Jan 16 11:48:43 2014
-- Standard       : VHDL'87
---------------------------------------------------------------------------------------
-- THIS FILE WAS GENERATED BY wbgen2 FROM SOURCE FILE wb_pos_calc_regs.wb
-- DO NOT HAND-EDIT UNLESS IT'S ABSOLUTELY NECESSARY!
---------------------------------------------------------------------------------------

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

use work.pos_calc_wbgen2_pkg.all;


entity wb_pos_calc_regs is
  port (
    rst_n_i                                  : in     std_logic;
    clk_sys_i                                : in     std_logic;
    wb_adr_i                                 : in     std_logic_vector(4 downto 0);
    wb_dat_i                                 : in     std_logic_vector(31 downto 0);
    wb_dat_o                                 : out    std_logic_vector(31 downto 0);
    wb_cyc_i                                 : in     std_logic;
    wb_sel_i                                 : in     std_logic_vector(3 downto 0);
    wb_stb_i                                 : in     std_logic;
    wb_we_i                                  : in     std_logic;
    wb_ack_o                                 : out    std_logic;
    wb_stall_o                               : out    std_logic;
    fs_clk2x_i                               : in     std_logic;
    fs_clk_i                                 : in     std_logic;
    regs_i                                   : in     t_pos_calc_in_registers;
    regs_o                                   : out    t_pos_calc_out_registers
  );
end wb_pos_calc_regs;

architecture syn of wb_pos_calc_regs is

signal pos_calc_ds_tbt_thres_val_int            : std_logic_vector(25 downto 0);
signal pos_calc_ds_tbt_thres_val_swb            : std_logic      ;
signal pos_calc_ds_tbt_thres_val_swb_delay      : std_logic      ;
signal pos_calc_ds_tbt_thres_val_swb_s0         : std_logic      ;
signal pos_calc_ds_tbt_thres_val_swb_s1         : std_logic      ;
signal pos_calc_ds_tbt_thres_val_swb_s2         : std_logic      ;
signal pos_calc_ds_fofb_thres_val_int           : std_logic_vector(25 downto 0);
signal pos_calc_ds_fofb_thres_val_swb           : std_logic      ;
signal pos_calc_ds_fofb_thres_val_swb_delay     : std_logic      ;
signal pos_calc_ds_fofb_thres_val_swb_s0        : std_logic      ;
signal pos_calc_ds_fofb_thres_val_swb_s1        : std_logic      ;
signal pos_calc_ds_fofb_thres_val_swb_s2        : std_logic      ;
signal pos_calc_ds_monit_thres_val_int          : std_logic_vector(25 downto 0);
signal pos_calc_ds_monit_thres_val_swb          : std_logic      ;
signal pos_calc_ds_monit_thres_val_swb_delay    : std_logic      ;
signal pos_calc_ds_monit_thres_val_swb_s0       : std_logic      ;
signal pos_calc_ds_monit_thres_val_swb_s1       : std_logic      ;
signal pos_calc_ds_monit_thres_val_swb_s2       : std_logic      ;
signal pos_calc_kx_val_int                      : std_logic_vector(24 downto 0);
signal pos_calc_kx_val_swb                      : std_logic      ;
signal pos_calc_kx_val_swb_delay                : std_logic      ;
signal pos_calc_kx_val_swb_s0                   : std_logic      ;
signal pos_calc_kx_val_swb_s1                   : std_logic      ;
signal pos_calc_kx_val_swb_s2                   : std_logic      ;
signal pos_calc_ky_val_int                      : std_logic_vector(24 downto 0);
signal pos_calc_ky_val_swb                      : std_logic      ;
signal pos_calc_ky_val_swb_delay                : std_logic      ;
signal pos_calc_ky_val_swb_s0                   : std_logic      ;
signal pos_calc_ky_val_swb_s1                   : std_logic      ;
signal pos_calc_ky_val_swb_s2                   : std_logic      ;
signal pos_calc_ksum_val_int                    : std_logic_vector(24 downto 0);
signal pos_calc_ksum_val_swb                    : std_logic      ;
signal pos_calc_ksum_val_swb_delay              : std_logic      ;
signal pos_calc_ksum_val_swb_s0                 : std_logic      ;
signal pos_calc_ksum_val_swb_s1                 : std_logic      ;
signal pos_calc_ksum_val_swb_s2                 : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_int           : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr_tbt_ch01_lwb           : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_delay     : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s0        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s1        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch01_lwb_s2        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_int           : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr_tbt_ch23_lwb           : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_delay     : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s0        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s1        : std_logic      ;
signal pos_calc_dsp_ctnr_tbt_ch23_lwb_s2        : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_int          : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr_fofb_ch01_lwb          : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_delay    : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s0       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s1       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch01_lwb_s2       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_int          : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr_fofb_ch23_lwb          : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_delay    : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s0       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s1       : std_logic      ;
signal pos_calc_dsp_ctnr_fofb_ch23_lwb_s2       : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_int         : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr1_monit_cic_lwb         : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_delay   : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_s0      : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_s1      : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cic_lwb_s2      : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_int        : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr1_monit_cfir_lwb        : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_delay  : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s0     : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s1     : std_logic      ;
signal pos_calc_dsp_ctnr1_monit_cfir_lwb_s2     : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_int        : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr2_monit_pfir_lwb        : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_delay  : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s0     : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s1     : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_pfir_lwb_s2     : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_int      : std_logic_vector(15 downto 0);
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb      : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0   : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1   : std_logic      ;
signal pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2   : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_int             : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_int_delay       : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_sync0           : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_sync1           : std_logic      ;
signal pos_calc_dsp_err_clr_tbt_sync2           : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_int            : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_int_delay      : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_sync0          : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_sync1          : std_logic      ;
signal pos_calc_dsp_err_clr_fofb_sync2          : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_int     : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_int_delay : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_sync0   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_sync1   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part1_sync2   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_int     : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_int_delay : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_sync0   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_sync1   : std_logic      ;
signal pos_calc_dsp_err_clr_monit_part2_sync2   : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_int           : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_int_delay     : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_sync0         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch0_sync2         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_int           : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_int_delay     : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_sync0         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch1_sync2         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_int           : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_int_delay     : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_sync0         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch2_sync2         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_int           : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_int_delay     : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_sync0         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_sync1         : std_logic      ;
signal pos_calc_dds_cfg_valid_ch3_sync2         : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_pinc_ch0_val_swb            : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_swb_delay      : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_swb_s0         : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_swb_s1         : std_logic      ;
signal pos_calc_dds_pinc_ch0_val_swb_s2         : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_pinc_ch1_val_swb            : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_swb_delay      : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_swb_s0         : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_swb_s1         : std_logic      ;
signal pos_calc_dds_pinc_ch1_val_swb_s2         : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_pinc_ch2_val_swb            : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_swb_delay      : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_swb_s0         : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_swb_s1         : std_logic      ;
signal pos_calc_dds_pinc_ch2_val_swb_s2         : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_pinc_ch3_val_swb            : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_swb_delay      : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_swb_s0         : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_swb_s1         : std_logic      ;
signal pos_calc_dds_pinc_ch3_val_swb_s2         : std_logic      ;
signal pos_calc_dds_poff_ch0_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_poff_ch0_val_swb            : std_logic      ;
signal pos_calc_dds_poff_ch0_val_swb_delay      : std_logic      ;
signal pos_calc_dds_poff_ch0_val_swb_s0         : std_logic      ;
signal pos_calc_dds_poff_ch0_val_swb_s1         : std_logic      ;
signal pos_calc_dds_poff_ch0_val_swb_s2         : std_logic      ;
signal pos_calc_dds_poff_ch1_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_poff_ch1_val_swb            : std_logic      ;
signal pos_calc_dds_poff_ch1_val_swb_delay      : std_logic      ;
signal pos_calc_dds_poff_ch1_val_swb_s0         : std_logic      ;
signal pos_calc_dds_poff_ch1_val_swb_s1         : std_logic      ;
signal pos_calc_dds_poff_ch1_val_swb_s2         : std_logic      ;
signal pos_calc_dds_poff_ch2_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_poff_ch2_val_swb            : std_logic      ;
signal pos_calc_dds_poff_ch2_val_swb_delay      : std_logic      ;
signal pos_calc_dds_poff_ch2_val_swb_s0         : std_logic      ;
signal pos_calc_dds_poff_ch2_val_swb_s1         : std_logic      ;
signal pos_calc_dds_poff_ch2_val_swb_s2         : std_logic      ;
signal pos_calc_dds_poff_ch3_val_int            : std_logic_vector(29 downto 0);
signal pos_calc_dds_poff_ch3_val_swb            : std_logic      ;
signal pos_calc_dds_poff_ch3_val_swb_delay      : std_logic      ;
signal pos_calc_dds_poff_ch3_val_swb_s0         : std_logic      ;
signal pos_calc_dds_poff_ch3_val_swb_s1         : std_logic      ;
signal pos_calc_dds_poff_ch3_val_swb_s2         : std_logic      ;
signal pos_calc_dsp_monit_amp_ch0_int           : std_logic_vector(31 downto 0);
signal pos_calc_dsp_monit_amp_ch0_lwb           : std_logic      ;
signal pos_calc_dsp_monit_amp_ch0_lwb_delay     : std_logic      ;
signal pos_calc_dsp_monit_amp_ch0_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_monit_amp_ch0_lwb_s0        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch0_lwb_s1        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch0_lwb_s2        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch1_int           : std_logic_vector(31 downto 0);
signal pos_calc_dsp_monit_amp_ch1_lwb           : std_logic      ;
signal pos_calc_dsp_monit_amp_ch1_lwb_delay     : std_logic      ;
signal pos_calc_dsp_monit_amp_ch1_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_monit_amp_ch1_lwb_s0        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch1_lwb_s1        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch1_lwb_s2        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch2_int           : std_logic_vector(31 downto 0);
signal pos_calc_dsp_monit_amp_ch2_lwb           : std_logic      ;
signal pos_calc_dsp_monit_amp_ch2_lwb_delay     : std_logic      ;
signal pos_calc_dsp_monit_amp_ch2_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_monit_amp_ch2_lwb_s0        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch2_lwb_s1        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch2_lwb_s2        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch3_int           : std_logic_vector(31 downto 0);
signal pos_calc_dsp_monit_amp_ch3_lwb           : std_logic      ;
signal pos_calc_dsp_monit_amp_ch3_lwb_delay     : std_logic      ;
signal pos_calc_dsp_monit_amp_ch3_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_monit_amp_ch3_lwb_s0        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch3_lwb_s1        : std_logic      ;
signal pos_calc_dsp_monit_amp_ch3_lwb_s2        : std_logic      ;
signal pos_calc_dsp_monit_pos_x_int             : std_logic_vector(31 downto 0);
signal pos_calc_dsp_monit_pos_x_lwb             : std_logic      ;
signal pos_calc_dsp_monit_pos_x_lwb_delay       : std_logic      ;
signal pos_calc_dsp_monit_pos_x_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_monit_pos_x_lwb_s0          : std_logic      ;
signal pos_calc_dsp_monit_pos_x_lwb_s1          : std_logic      ;
signal pos_calc_dsp_monit_pos_x_lwb_s2          : std_logic      ;
signal pos_calc_dsp_monit_pos_y_int             : std_logic_vector(31 downto 0);
signal pos_calc_dsp_monit_pos_y_lwb             : std_logic      ;
signal pos_calc_dsp_monit_pos_y_lwb_delay       : std_logic      ;
signal pos_calc_dsp_monit_pos_y_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_monit_pos_y_lwb_s0          : std_logic      ;
signal pos_calc_dsp_monit_pos_y_lwb_s1          : std_logic      ;
signal pos_calc_dsp_monit_pos_y_lwb_s2          : std_logic      ;
signal pos_calc_dsp_monit_pos_q_int             : std_logic_vector(31 downto 0);
signal pos_calc_dsp_monit_pos_q_lwb             : std_logic      ;
signal pos_calc_dsp_monit_pos_q_lwb_delay       : std_logic      ;
signal pos_calc_dsp_monit_pos_q_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_monit_pos_q_lwb_s0          : std_logic      ;
signal pos_calc_dsp_monit_pos_q_lwb_s1          : std_logic      ;
signal pos_calc_dsp_monit_pos_q_lwb_s2          : std_logic      ;
signal pos_calc_dsp_monit_pos_sum_int           : std_logic_vector(31 downto 0);
signal pos_calc_dsp_monit_pos_sum_lwb           : std_logic      ;
signal pos_calc_dsp_monit_pos_sum_lwb_delay     : std_logic      ;
signal pos_calc_dsp_monit_pos_sum_lwb_in_progress : std_logic      ;
signal pos_calc_dsp_monit_pos_sum_lwb_s0        : std_logic      ;
signal pos_calc_dsp_monit_pos_sum_lwb_s1        : std_logic      ;
signal pos_calc_dsp_monit_pos_sum_lwb_s2        : std_logic      ;
signal ack_sreg                                 : std_logic_vector(9 downto 0);
signal rddata_reg                               : std_logic_vector(31 downto 0);
signal wrdata_reg                               : std_logic_vector(31 downto 0);
signal bwsel_reg                                : std_logic_vector(3 downto 0);
signal rwaddr_reg                               : std_logic_vector(4 downto 0);
signal ack_in_progress                          : std_logic      ;
signal wr_int                                   : std_logic      ;
signal rd_int                                   : std_logic      ;
signal allones                                  : std_logic_vector(31 downto 0);
signal allzeros                                 : std_logic_vector(31 downto 0);

begin
-- Some internal signals assignments. For (foreseen) compatibility with other bus standards.
  wrdata_reg <= wb_dat_i;
  bwsel_reg <= wb_sel_i;
  rd_int <= wb_cyc_i and (wb_stb_i and (not wb_we_i));
  wr_int <= wb_cyc_i and (wb_stb_i and wb_we_i);
  allones <= (others => '1');
  allzeros <= (others => '0');
-- 
-- Main register bank access process.
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      ack_sreg <= "0000000000";
      ack_in_progress <= '0';
      rddata_reg <= "00000000000000000000000000000000";
      pos_calc_ds_tbt_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_tbt_thres_val_swb <= '0';
      pos_calc_ds_tbt_thres_val_swb_delay <= '0';
      pos_calc_ds_fofb_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_fofb_thres_val_swb <= '0';
      pos_calc_ds_fofb_thres_val_swb_delay <= '0';
      pos_calc_ds_monit_thres_val_int <= "00000000000000000000000000";
      pos_calc_ds_monit_thres_val_swb <= '0';
      pos_calc_ds_monit_thres_val_swb_delay <= '0';
      pos_calc_kx_val_int <= "0000000000000000000000000";
      pos_calc_kx_val_swb <= '0';
      pos_calc_kx_val_swb_delay <= '0';
      pos_calc_ky_val_int <= "0000000000000000000000000";
      pos_calc_ky_val_swb <= '0';
      pos_calc_ky_val_swb_delay <= '0';
      pos_calc_ksum_val_int <= "0000000000000000000000000";
      pos_calc_ksum_val_swb <= '0';
      pos_calc_ksum_val_swb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '0';
      pos_calc_dsp_err_clr_tbt_int <= '0';
      pos_calc_dsp_err_clr_tbt_int_delay <= '0';
      pos_calc_dsp_err_clr_fofb_int <= '0';
      pos_calc_dsp_err_clr_fofb_int_delay <= '0';
      pos_calc_dsp_err_clr_monit_part1_int <= '0';
      pos_calc_dsp_err_clr_monit_part1_int_delay <= '0';
      pos_calc_dsp_err_clr_monit_part2_int <= '0';
      pos_calc_dsp_err_clr_monit_part2_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch0_int <= '0';
      pos_calc_dds_cfg_valid_ch0_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch1_int <= '0';
      pos_calc_dds_cfg_valid_ch1_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch2_int <= '0';
      pos_calc_dds_cfg_valid_ch2_int_delay <= '0';
      pos_calc_dds_cfg_valid_ch3_int <= '0';
      pos_calc_dds_cfg_valid_ch3_int_delay <= '0';
      pos_calc_dds_pinc_ch0_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch0_val_swb <= '0';
      pos_calc_dds_pinc_ch0_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch1_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch1_val_swb <= '0';
      pos_calc_dds_pinc_ch1_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch2_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch2_val_swb <= '0';
      pos_calc_dds_pinc_ch2_val_swb_delay <= '0';
      pos_calc_dds_pinc_ch3_val_int <= "000000000000000000000000000000";
      pos_calc_dds_pinc_ch3_val_swb <= '0';
      pos_calc_dds_pinc_ch3_val_swb_delay <= '0';
      pos_calc_dds_poff_ch0_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch0_val_swb <= '0';
      pos_calc_dds_poff_ch0_val_swb_delay <= '0';
      pos_calc_dds_poff_ch1_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch1_val_swb <= '0';
      pos_calc_dds_poff_ch1_val_swb_delay <= '0';
      pos_calc_dds_poff_ch2_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch2_val_swb <= '0';
      pos_calc_dds_poff_ch2_val_swb_delay <= '0';
      pos_calc_dds_poff_ch3_val_int <= "000000000000000000000000000000";
      pos_calc_dds_poff_ch3_val_swb <= '0';
      pos_calc_dds_poff_ch3_val_swb_delay <= '0';
      pos_calc_dsp_monit_amp_ch0_lwb <= '0';
      pos_calc_dsp_monit_amp_ch0_lwb_delay <= '0';
      pos_calc_dsp_monit_amp_ch0_lwb_in_progress <= '0';
      pos_calc_dsp_monit_amp_ch1_lwb <= '0';
      pos_calc_dsp_monit_amp_ch1_lwb_delay <= '0';
      pos_calc_dsp_monit_amp_ch1_lwb_in_progress <= '0';
      pos_calc_dsp_monit_amp_ch2_lwb <= '0';
      pos_calc_dsp_monit_amp_ch2_lwb_delay <= '0';
      pos_calc_dsp_monit_amp_ch2_lwb_in_progress <= '0';
      pos_calc_dsp_monit_amp_ch3_lwb <= '0';
      pos_calc_dsp_monit_amp_ch3_lwb_delay <= '0';
      pos_calc_dsp_monit_amp_ch3_lwb_in_progress <= '0';
      pos_calc_dsp_monit_pos_x_lwb <= '0';
      pos_calc_dsp_monit_pos_x_lwb_delay <= '0';
      pos_calc_dsp_monit_pos_x_lwb_in_progress <= '0';
      pos_calc_dsp_monit_pos_y_lwb <= '0';
      pos_calc_dsp_monit_pos_y_lwb_delay <= '0';
      pos_calc_dsp_monit_pos_y_lwb_in_progress <= '0';
      pos_calc_dsp_monit_pos_q_lwb <= '0';
      pos_calc_dsp_monit_pos_q_lwb_delay <= '0';
      pos_calc_dsp_monit_pos_q_lwb_in_progress <= '0';
      pos_calc_dsp_monit_pos_sum_lwb <= '0';
      pos_calc_dsp_monit_pos_sum_lwb_delay <= '0';
      pos_calc_dsp_monit_pos_sum_lwb_in_progress <= '0';
    elsif rising_edge(clk_sys_i) then
-- advance the ACK generator shift register
      ack_sreg(8 downto 0) <= ack_sreg(9 downto 1);
      ack_sreg(9) <= '0';
      if (ack_in_progress = '1') then
        if (ack_sreg(0) = '1') then
          ack_in_progress <= '0';
        else
          pos_calc_ds_tbt_thres_val_swb <= pos_calc_ds_tbt_thres_val_swb_delay;
          pos_calc_ds_tbt_thres_val_swb_delay <= '0';
          pos_calc_ds_fofb_thres_val_swb <= pos_calc_ds_fofb_thres_val_swb_delay;
          pos_calc_ds_fofb_thres_val_swb_delay <= '0';
          pos_calc_ds_monit_thres_val_swb <= pos_calc_ds_monit_thres_val_swb_delay;
          pos_calc_ds_monit_thres_val_swb_delay <= '0';
          pos_calc_kx_val_swb <= pos_calc_kx_val_swb_delay;
          pos_calc_kx_val_swb_delay <= '0';
          pos_calc_ky_val_swb <= pos_calc_ky_val_swb_delay;
          pos_calc_ky_val_swb_delay <= '0';
          pos_calc_ksum_val_swb <= pos_calc_ksum_val_swb_delay;
          pos_calc_ksum_val_swb_delay <= '0';
          pos_calc_dsp_ctnr_tbt_ch01_lwb <= pos_calc_dsp_ctnr_tbt_ch01_lwb_delay;
          pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr_tbt_ch01_int;
            pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_tbt_ch23_lwb <= pos_calc_dsp_ctnr_tbt_ch23_lwb_delay;
          pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr_tbt_ch23_int;
            pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_fofb_ch01_lwb <= pos_calc_dsp_ctnr_fofb_ch01_lwb_delay;
          pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr_fofb_ch01_int;
            pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr_fofb_ch23_lwb <= pos_calc_dsp_ctnr_fofb_ch23_lwb_delay;
          pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr_fofb_ch23_int;
            pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr1_monit_cic_lwb <= pos_calc_dsp_ctnr1_monit_cic_lwb_delay;
          pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr1_monit_cic_int;
            pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr1_monit_cfir_lwb <= pos_calc_dsp_ctnr1_monit_cfir_lwb_delay;
          pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr1_monit_cfir_int;
            pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr2_monit_pfir_lwb <= pos_calc_dsp_ctnr2_monit_pfir_lwb_delay;
          pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress = '1')) then
            rddata_reg(15 downto 0) <= pos_calc_dsp_ctnr2_monit_pfir_int;
            pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_ctnr2_monit_fir_01_lwb <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay;
          pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress = '1')) then
            rddata_reg(31 downto 16) <= pos_calc_dsp_ctnr2_monit_fir_01_int;
            pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_err_clr_tbt_int <= pos_calc_dsp_err_clr_tbt_int_delay;
          pos_calc_dsp_err_clr_tbt_int_delay <= '0';
          pos_calc_dsp_err_clr_fofb_int <= pos_calc_dsp_err_clr_fofb_int_delay;
          pos_calc_dsp_err_clr_fofb_int_delay <= '0';
          pos_calc_dsp_err_clr_monit_part1_int <= pos_calc_dsp_err_clr_monit_part1_int_delay;
          pos_calc_dsp_err_clr_monit_part1_int_delay <= '0';
          pos_calc_dsp_err_clr_monit_part2_int <= pos_calc_dsp_err_clr_monit_part2_int_delay;
          pos_calc_dsp_err_clr_monit_part2_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch0_int <= pos_calc_dds_cfg_valid_ch0_int_delay;
          pos_calc_dds_cfg_valid_ch0_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch1_int <= pos_calc_dds_cfg_valid_ch1_int_delay;
          pos_calc_dds_cfg_valid_ch1_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch2_int <= pos_calc_dds_cfg_valid_ch2_int_delay;
          pos_calc_dds_cfg_valid_ch2_int_delay <= '0';
          pos_calc_dds_cfg_valid_ch3_int <= pos_calc_dds_cfg_valid_ch3_int_delay;
          pos_calc_dds_cfg_valid_ch3_int_delay <= '0';
          pos_calc_dds_pinc_ch0_val_swb <= pos_calc_dds_pinc_ch0_val_swb_delay;
          pos_calc_dds_pinc_ch0_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch1_val_swb <= pos_calc_dds_pinc_ch1_val_swb_delay;
          pos_calc_dds_pinc_ch1_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch2_val_swb <= pos_calc_dds_pinc_ch2_val_swb_delay;
          pos_calc_dds_pinc_ch2_val_swb_delay <= '0';
          pos_calc_dds_pinc_ch3_val_swb <= pos_calc_dds_pinc_ch3_val_swb_delay;
          pos_calc_dds_pinc_ch3_val_swb_delay <= '0';
          pos_calc_dds_poff_ch0_val_swb <= pos_calc_dds_poff_ch0_val_swb_delay;
          pos_calc_dds_poff_ch0_val_swb_delay <= '0';
          pos_calc_dds_poff_ch1_val_swb <= pos_calc_dds_poff_ch1_val_swb_delay;
          pos_calc_dds_poff_ch1_val_swb_delay <= '0';
          pos_calc_dds_poff_ch2_val_swb <= pos_calc_dds_poff_ch2_val_swb_delay;
          pos_calc_dds_poff_ch2_val_swb_delay <= '0';
          pos_calc_dds_poff_ch3_val_swb <= pos_calc_dds_poff_ch3_val_swb_delay;
          pos_calc_dds_poff_ch3_val_swb_delay <= '0';
          pos_calc_dsp_monit_amp_ch0_lwb <= pos_calc_dsp_monit_amp_ch0_lwb_delay;
          pos_calc_dsp_monit_amp_ch0_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_monit_amp_ch0_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_amp_ch0_int;
            pos_calc_dsp_monit_amp_ch0_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_monit_amp_ch1_lwb <= pos_calc_dsp_monit_amp_ch1_lwb_delay;
          pos_calc_dsp_monit_amp_ch1_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_monit_amp_ch1_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_amp_ch1_int;
            pos_calc_dsp_monit_amp_ch1_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_monit_amp_ch2_lwb <= pos_calc_dsp_monit_amp_ch2_lwb_delay;
          pos_calc_dsp_monit_amp_ch2_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_monit_amp_ch2_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_amp_ch2_int;
            pos_calc_dsp_monit_amp_ch2_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_monit_amp_ch3_lwb <= pos_calc_dsp_monit_amp_ch3_lwb_delay;
          pos_calc_dsp_monit_amp_ch3_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_monit_amp_ch3_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_amp_ch3_int;
            pos_calc_dsp_monit_amp_ch3_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_monit_pos_x_lwb <= pos_calc_dsp_monit_pos_x_lwb_delay;
          pos_calc_dsp_monit_pos_x_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_monit_pos_x_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_pos_x_int;
            pos_calc_dsp_monit_pos_x_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_monit_pos_y_lwb <= pos_calc_dsp_monit_pos_y_lwb_delay;
          pos_calc_dsp_monit_pos_y_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_monit_pos_y_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_pos_y_int;
            pos_calc_dsp_monit_pos_y_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_monit_pos_q_lwb <= pos_calc_dsp_monit_pos_q_lwb_delay;
          pos_calc_dsp_monit_pos_q_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_monit_pos_q_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_pos_q_int;
            pos_calc_dsp_monit_pos_q_lwb_in_progress <= '0';
          end if;
          pos_calc_dsp_monit_pos_sum_lwb <= pos_calc_dsp_monit_pos_sum_lwb_delay;
          pos_calc_dsp_monit_pos_sum_lwb_delay <= '0';
          if ((ack_sreg(1) = '1') and (pos_calc_dsp_monit_pos_sum_lwb_in_progress = '1')) then
            rddata_reg(31 downto 0) <= pos_calc_dsp_monit_pos_sum_int;
            pos_calc_dsp_monit_pos_sum_lwb_in_progress <= '0';
          end if;
        end if;
      else
        if ((wb_cyc_i = '1') and (wb_stb_i = '1')) then
          case rwaddr_reg(4 downto 0) is
          when "00000" => 
            if (wb_we_i = '1') then
              pos_calc_ds_tbt_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_tbt_thres_val_swb <= '1';
              pos_calc_ds_tbt_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_tbt_thres_val_int;
            rddata_reg(31 downto 26) <= regs_i.ds_tbt_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "00001" => 
            if (wb_we_i = '1') then
              pos_calc_ds_fofb_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_fofb_thres_val_swb <= '1';
              pos_calc_ds_fofb_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_fofb_thres_val_int;
            rddata_reg(31 downto 26) <= regs_i.ds_fofb_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "00010" => 
            if (wb_we_i = '1') then
              pos_calc_ds_monit_thres_val_int <= wrdata_reg(25 downto 0);
              pos_calc_ds_monit_thres_val_swb <= '1';
              pos_calc_ds_monit_thres_val_swb_delay <= '1';
            end if;
            rddata_reg(25 downto 0) <= pos_calc_ds_monit_thres_val_int;
            rddata_reg(31 downto 26) <= regs_i.ds_monit_thres_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "00011" => 
            if (wb_we_i = '1') then
              pos_calc_kx_val_int <= wrdata_reg(24 downto 0);
              pos_calc_kx_val_swb <= '1';
              pos_calc_kx_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_kx_val_int;
            rddata_reg(31 downto 25) <= regs_i.kx_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "00100" => 
            if (wb_we_i = '1') then
              pos_calc_ky_val_int <= wrdata_reg(24 downto 0);
              pos_calc_ky_val_swb <= '1';
              pos_calc_ky_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_ky_val_int;
            rddata_reg(31 downto 25) <= regs_i.ky_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "00101" => 
            if (wb_we_i = '1') then
              pos_calc_ksum_val_int <= wrdata_reg(24 downto 0);
              pos_calc_ksum_val_swb <= '1';
              pos_calc_ksum_val_swb_delay <= '1';
            end if;
            rddata_reg(24 downto 0) <= pos_calc_ksum_val_int;
            rddata_reg(31 downto 25) <= regs_i.ksum_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "00110" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_tbt_ch01_lwb <= '1';
              pos_calc_dsp_ctnr_tbt_ch01_lwb_delay <= '1';
              pos_calc_dsp_ctnr_tbt_ch01_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_tbt_ch23_lwb <= '1';
              pos_calc_dsp_ctnr_tbt_ch23_lwb_delay <= '1';
              pos_calc_dsp_ctnr_tbt_ch23_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "00111" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_fofb_ch01_lwb <= '1';
              pos_calc_dsp_ctnr_fofb_ch01_lwb_delay <= '1';
              pos_calc_dsp_ctnr_fofb_ch01_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr_fofb_ch23_lwb <= '1';
              pos_calc_dsp_ctnr_fofb_ch23_lwb_delay <= '1';
              pos_calc_dsp_ctnr_fofb_ch23_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "01000" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr1_monit_cic_lwb <= '1';
              pos_calc_dsp_ctnr1_monit_cic_lwb_delay <= '1';
              pos_calc_dsp_ctnr1_monit_cic_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr1_monit_cfir_lwb <= '1';
              pos_calc_dsp_ctnr1_monit_cfir_lwb_delay <= '1';
              pos_calc_dsp_ctnr1_monit_cfir_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "01001" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr2_monit_pfir_lwb <= '1';
              pos_calc_dsp_ctnr2_monit_pfir_lwb_delay <= '1';
              pos_calc_dsp_ctnr2_monit_pfir_lwb_in_progress <= '1';
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_ctnr2_monit_fir_01_lwb <= '1';
              pos_calc_dsp_ctnr2_monit_fir_01_lwb_delay <= '1';
              pos_calc_dsp_ctnr2_monit_fir_01_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "01010" => 
            if (wb_we_i = '1') then
              pos_calc_dsp_err_clr_tbt_int <= wrdata_reg(0);
              pos_calc_dsp_err_clr_tbt_int_delay <= wrdata_reg(0);
              pos_calc_dsp_err_clr_fofb_int <= wrdata_reg(1);
              pos_calc_dsp_err_clr_fofb_int_delay <= wrdata_reg(1);
              pos_calc_dsp_err_clr_monit_part1_int <= wrdata_reg(2);
              pos_calc_dsp_err_clr_monit_part1_int_delay <= wrdata_reg(2);
              pos_calc_dsp_err_clr_monit_part2_int <= wrdata_reg(3);
              pos_calc_dsp_err_clr_monit_part2_int_delay <= wrdata_reg(3);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(1) <= '0';
            rddata_reg(2) <= '0';
            rddata_reg(3) <= '0';
            rddata_reg(0) <= 'X';
            rddata_reg(1) <= 'X';
            rddata_reg(2) <= 'X';
            rddata_reg(3) <= 'X';
            rddata_reg(4) <= 'X';
            rddata_reg(5) <= 'X';
            rddata_reg(6) <= 'X';
            rddata_reg(7) <= 'X';
            rddata_reg(8) <= 'X';
            rddata_reg(9) <= 'X';
            rddata_reg(10) <= 'X';
            rddata_reg(11) <= 'X';
            rddata_reg(12) <= 'X';
            rddata_reg(13) <= 'X';
            rddata_reg(14) <= 'X';
            rddata_reg(15) <= 'X';
            rddata_reg(16) <= 'X';
            rddata_reg(17) <= 'X';
            rddata_reg(18) <= 'X';
            rddata_reg(19) <= 'X';
            rddata_reg(20) <= 'X';
            rddata_reg(21) <= 'X';
            rddata_reg(22) <= 'X';
            rddata_reg(23) <= 'X';
            rddata_reg(24) <= 'X';
            rddata_reg(25) <= 'X';
            rddata_reg(26) <= 'X';
            rddata_reg(27) <= 'X';
            rddata_reg(28) <= 'X';
            rddata_reg(29) <= 'X';
            rddata_reg(30) <= 'X';
            rddata_reg(31) <= 'X';
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "01011" => 
            if (wb_we_i = '1') then
              pos_calc_dds_cfg_valid_ch0_int <= wrdata_reg(0);
              pos_calc_dds_cfg_valid_ch0_int_delay <= wrdata_reg(0);
              pos_calc_dds_cfg_valid_ch1_int <= wrdata_reg(8);
              pos_calc_dds_cfg_valid_ch1_int_delay <= wrdata_reg(8);
              pos_calc_dds_cfg_valid_ch2_int <= wrdata_reg(16);
              pos_calc_dds_cfg_valid_ch2_int_delay <= wrdata_reg(16);
              pos_calc_dds_cfg_valid_ch3_int <= wrdata_reg(24);
              pos_calc_dds_cfg_valid_ch3_int_delay <= wrdata_reg(24);
            end if;
            rddata_reg(0) <= '0';
            rddata_reg(7 downto 1) <= regs_i.dds_cfg_reserved_ch0_i;
            rddata_reg(8) <= '0';
            rddata_reg(15 downto 9) <= regs_i.dds_cfg_reserved_ch1_i;
            rddata_reg(16) <= '0';
            rddata_reg(23 downto 17) <= regs_i.dds_cfg_reserved_ch2_i;
            rddata_reg(24) <= '0';
            rddata_reg(31 downto 25) <= regs_i.dds_cfg_reserved_ch3_i;
            ack_sreg(4) <= '1';
            ack_in_progress <= '1';
          when "01100" => 
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch0_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch0_val_swb <= '1';
              pos_calc_dds_pinc_ch0_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch0_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_pinc_ch0_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "01101" => 
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch1_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch1_val_swb <= '1';
              pos_calc_dds_pinc_ch1_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch1_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_pinc_ch1_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "01110" => 
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch2_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch2_val_swb <= '1';
              pos_calc_dds_pinc_ch2_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch2_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_pinc_ch2_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "01111" => 
            if (wb_we_i = '1') then
              pos_calc_dds_pinc_ch3_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_pinc_ch3_val_swb <= '1';
              pos_calc_dds_pinc_ch3_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_pinc_ch3_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_pinc_ch3_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "10000" => 
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch0_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch0_val_swb <= '1';
              pos_calc_dds_poff_ch0_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch0_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_poff_ch0_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "10001" => 
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch1_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch1_val_swb <= '1';
              pos_calc_dds_poff_ch1_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch1_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_poff_ch1_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "10010" => 
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch2_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch2_val_swb <= '1';
              pos_calc_dds_poff_ch2_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch2_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_poff_ch2_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "10011" => 
            if (wb_we_i = '1') then
              pos_calc_dds_poff_ch3_val_int <= wrdata_reg(29 downto 0);
              pos_calc_dds_poff_ch3_val_swb <= '1';
              pos_calc_dds_poff_ch3_val_swb_delay <= '1';
            end if;
            rddata_reg(29 downto 0) <= pos_calc_dds_poff_ch3_val_int;
            rddata_reg(31 downto 30) <= regs_i.dds_poff_ch3_reserved_i;
            ack_sreg(3) <= '1';
            ack_in_progress <= '1';
          when "10100" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_monit_amp_ch0_lwb <= '1';
              pos_calc_dsp_monit_amp_ch0_lwb_delay <= '1';
              pos_calc_dsp_monit_amp_ch0_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "10101" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_monit_amp_ch1_lwb <= '1';
              pos_calc_dsp_monit_amp_ch1_lwb_delay <= '1';
              pos_calc_dsp_monit_amp_ch1_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "10110" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_monit_amp_ch2_lwb <= '1';
              pos_calc_dsp_monit_amp_ch2_lwb_delay <= '1';
              pos_calc_dsp_monit_amp_ch2_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "10111" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_monit_amp_ch3_lwb <= '1';
              pos_calc_dsp_monit_amp_ch3_lwb_delay <= '1';
              pos_calc_dsp_monit_amp_ch3_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "11000" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_monit_pos_x_lwb <= '1';
              pos_calc_dsp_monit_pos_x_lwb_delay <= '1';
              pos_calc_dsp_monit_pos_x_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "11001" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_monit_pos_y_lwb <= '1';
              pos_calc_dsp_monit_pos_y_lwb_delay <= '1';
              pos_calc_dsp_monit_pos_y_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "11010" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_monit_pos_q_lwb <= '1';
              pos_calc_dsp_monit_pos_q_lwb_delay <= '1';
              pos_calc_dsp_monit_pos_q_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when "11011" => 
            if (wb_we_i = '1') then
            end if;
            if (wb_we_i = '0') then
              pos_calc_dsp_monit_pos_sum_lwb <= '1';
              pos_calc_dsp_monit_pos_sum_lwb_delay <= '1';
              pos_calc_dsp_monit_pos_sum_lwb_in_progress <= '1';
            end if;
            ack_sreg(5) <= '1';
            ack_in_progress <= '1';
          when others =>
-- prevent the slave from hanging the bus on invalid address
            ack_in_progress <= '1';
            ack_sreg(0) <= '1';
          end case;
        end if;
      end if;
    end if;
  end process;
  
  
-- Drive the data output bus
  wb_dat_o <= rddata_reg;
-- Config divisor threshold TBT
-- asynchronous std_logic_vector register : Config divisor threshold TBT (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_ds_tbt_thres_val_swb_s0 <= '0';
      pos_calc_ds_tbt_thres_val_swb_s1 <= '0';
      pos_calc_ds_tbt_thres_val_swb_s2 <= '0';
      regs_o.ds_tbt_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_tbt_thres_val_swb_s0 <= pos_calc_ds_tbt_thres_val_swb;
      pos_calc_ds_tbt_thres_val_swb_s1 <= pos_calc_ds_tbt_thres_val_swb_s0;
      pos_calc_ds_tbt_thres_val_swb_s2 <= pos_calc_ds_tbt_thres_val_swb_s1;
      if ((pos_calc_ds_tbt_thres_val_swb_s2 = '0') and (pos_calc_ds_tbt_thres_val_swb_s1 = '1')) then
        regs_o.ds_tbt_thres_val_o <= pos_calc_ds_tbt_thres_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- Config divisor threshold FOFB
-- asynchronous std_logic_vector register : Config divisor threshold FOFB (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_ds_fofb_thres_val_swb_s0 <= '0';
      pos_calc_ds_fofb_thres_val_swb_s1 <= '0';
      pos_calc_ds_fofb_thres_val_swb_s2 <= '0';
      regs_o.ds_fofb_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_fofb_thres_val_swb_s0 <= pos_calc_ds_fofb_thres_val_swb;
      pos_calc_ds_fofb_thres_val_swb_s1 <= pos_calc_ds_fofb_thres_val_swb_s0;
      pos_calc_ds_fofb_thres_val_swb_s2 <= pos_calc_ds_fofb_thres_val_swb_s1;
      if ((pos_calc_ds_fofb_thres_val_swb_s2 = '0') and (pos_calc_ds_fofb_thres_val_swb_s1 = '1')) then
        regs_o.ds_fofb_thres_val_o <= pos_calc_ds_fofb_thres_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- Config Divisor Threshold Monit.
-- asynchronous std_logic_vector register : Config Divisor Threshold Monit. (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_ds_monit_thres_val_swb_s0 <= '0';
      pos_calc_ds_monit_thres_val_swb_s1 <= '0';
      pos_calc_ds_monit_thres_val_swb_s2 <= '0';
      regs_o.ds_monit_thres_val_o <= "00000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ds_monit_thres_val_swb_s0 <= pos_calc_ds_monit_thres_val_swb;
      pos_calc_ds_monit_thres_val_swb_s1 <= pos_calc_ds_monit_thres_val_swb_s0;
      pos_calc_ds_monit_thres_val_swb_s2 <= pos_calc_ds_monit_thres_val_swb_s1;
      if ((pos_calc_ds_monit_thres_val_swb_s2 = '0') and (pos_calc_ds_monit_thres_val_swb_s1 = '1')) then
        regs_o.ds_monit_thres_val_o <= pos_calc_ds_monit_thres_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- BPM sensitivity (X axis) parameter register
-- asynchronous std_logic_vector register : BPM sensitivity (X axis) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_kx_val_swb_s0 <= '0';
      pos_calc_kx_val_swb_s1 <= '0';
      pos_calc_kx_val_swb_s2 <= '0';
      regs_o.kx_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_kx_val_swb_s0 <= pos_calc_kx_val_swb;
      pos_calc_kx_val_swb_s1 <= pos_calc_kx_val_swb_s0;
      pos_calc_kx_val_swb_s2 <= pos_calc_kx_val_swb_s1;
      if ((pos_calc_kx_val_swb_s2 = '0') and (pos_calc_kx_val_swb_s1 = '1')) then
        regs_o.kx_val_o <= pos_calc_kx_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- BPM sensitivity (Y axis) parameter register
-- asynchronous std_logic_vector register : BPM sensitivity (Y axis) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_ky_val_swb_s0 <= '0';
      pos_calc_ky_val_swb_s1 <= '0';
      pos_calc_ky_val_swb_s2 <= '0';
      regs_o.ky_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ky_val_swb_s0 <= pos_calc_ky_val_swb;
      pos_calc_ky_val_swb_s1 <= pos_calc_ky_val_swb_s0;
      pos_calc_ky_val_swb_s2 <= pos_calc_ky_val_swb_s1;
      if ((pos_calc_ky_val_swb_s2 = '0') and (pos_calc_ky_val_swb_s1 = '1')) then
        regs_o.ky_val_o <= pos_calc_ky_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- BPM sensitivity (Sum) parameter register
-- asynchronous std_logic_vector register : BPM sensitivity (Sum) parameter register (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_ksum_val_swb_s0 <= '0';
      pos_calc_ksum_val_swb_s1 <= '0';
      pos_calc_ksum_val_swb_s2 <= '0';
      regs_o.ksum_val_o <= "0000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_ksum_val_swb_s0 <= pos_calc_ksum_val_swb;
      pos_calc_ksum_val_swb_s1 <= pos_calc_ksum_val_swb_s0;
      pos_calc_ksum_val_swb_s2 <= pos_calc_ksum_val_swb_s1;
      if ((pos_calc_ksum_val_swb_s2 = '0') and (pos_calc_ksum_val_swb_s1 = '1')) then
        regs_o.ksum_val_o <= pos_calc_ksum_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- TBT incorrect counter for channels 0/1 (multiplexed)
-- asynchronous std_logic_vector register : TBT incorrect counter for channels 0/1 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_tbt_ch01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s0 <= pos_calc_dsp_ctnr_tbt_ch01_lwb;
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 <= pos_calc_dsp_ctnr_tbt_ch01_lwb_s0;
      pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 <= pos_calc_dsp_ctnr_tbt_ch01_lwb_s1;
      if ((pos_calc_dsp_ctnr_tbt_ch01_lwb_s1 = '1') and (pos_calc_dsp_ctnr_tbt_ch01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_tbt_ch01_int <= regs_i.dsp_ctnr_tbt_ch01_i;
      end if;
    end if;
  end process;
  
  
-- TBT incorrect counter for channels 2/3 (multiplexed)
-- asynchronous std_logic_vector register : TBT incorrect counter for channels 2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_tbt_ch23_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s0 <= pos_calc_dsp_ctnr_tbt_ch23_lwb;
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 <= pos_calc_dsp_ctnr_tbt_ch23_lwb_s0;
      pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 <= pos_calc_dsp_ctnr_tbt_ch23_lwb_s1;
      if ((pos_calc_dsp_ctnr_tbt_ch23_lwb_s1 = '1') and (pos_calc_dsp_ctnr_tbt_ch23_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_tbt_ch23_int <= regs_i.dsp_ctnr_tbt_ch23_i;
      end if;
    end if;
  end process;
  
  
-- FOFB incorrect counter for channels 0/1 (multiplexed)
-- asynchronous std_logic_vector register : FOFB incorrect counter for channels 0/1 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_fofb_ch01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s0 <= pos_calc_dsp_ctnr_fofb_ch01_lwb;
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 <= pos_calc_dsp_ctnr_fofb_ch01_lwb_s0;
      pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 <= pos_calc_dsp_ctnr_fofb_ch01_lwb_s1;
      if ((pos_calc_dsp_ctnr_fofb_ch01_lwb_s1 = '1') and (pos_calc_dsp_ctnr_fofb_ch01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_fofb_ch01_int <= regs_i.dsp_ctnr_fofb_ch01_i;
      end if;
    end if;
  end process;
  
  
-- FOFB incorrect counter for channels 2/3 (multiplexed)
-- asynchronous std_logic_vector register : FOFB incorrect counter for channels 2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s0 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 <= '0';
      pos_calc_dsp_ctnr_fofb_ch23_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s0 <= pos_calc_dsp_ctnr_fofb_ch23_lwb;
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 <= pos_calc_dsp_ctnr_fofb_ch23_lwb_s0;
      pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 <= pos_calc_dsp_ctnr_fofb_ch23_lwb_s1;
      if ((pos_calc_dsp_ctnr_fofb_ch23_lwb_s1 = '1') and (pos_calc_dsp_ctnr_fofb_ch23_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr_fofb_ch23_int <= regs_i.dsp_ctnr_fofb_ch23_i;
      end if;
    end if;
  end process;
  
  
-- Monit. CIC incorrect counter for channels 0/1/2/3 (multiplexed)
-- asynchronous std_logic_vector register : Monit. CIC incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_ctnr1_monit_cic_lwb_s0 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_s1 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_lwb_s2 <= '0';
      pos_calc_dsp_ctnr1_monit_cic_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr1_monit_cic_lwb_s0 <= pos_calc_dsp_ctnr1_monit_cic_lwb;
      pos_calc_dsp_ctnr1_monit_cic_lwb_s1 <= pos_calc_dsp_ctnr1_monit_cic_lwb_s0;
      pos_calc_dsp_ctnr1_monit_cic_lwb_s2 <= pos_calc_dsp_ctnr1_monit_cic_lwb_s1;
      if ((pos_calc_dsp_ctnr1_monit_cic_lwb_s1 = '1') and (pos_calc_dsp_ctnr1_monit_cic_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr1_monit_cic_int <= regs_i.dsp_ctnr1_monit_cic_i;
      end if;
    end if;
  end process;
  
  
-- Monit. CFIR incorrect counter for channels 0/1/2/3 (multiplexed)
-- asynchronous std_logic_vector register : Monit. CFIR incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s0 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 <= '0';
      pos_calc_dsp_ctnr1_monit_cfir_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s0 <= pos_calc_dsp_ctnr1_monit_cfir_lwb;
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 <= pos_calc_dsp_ctnr1_monit_cfir_lwb_s0;
      pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 <= pos_calc_dsp_ctnr1_monit_cfir_lwb_s1;
      if ((pos_calc_dsp_ctnr1_monit_cfir_lwb_s1 = '1') and (pos_calc_dsp_ctnr1_monit_cfir_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr1_monit_cfir_int <= regs_i.dsp_ctnr1_monit_cfir_i;
      end if;
    end if;
  end process;
  
  
-- Monit. PFIR incorrect counter for channels 0/1/2/3 (multiplexed)
-- asynchronous std_logic_vector register : Monit. PFIR incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s0 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 <= '0';
      pos_calc_dsp_ctnr2_monit_pfir_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s0 <= pos_calc_dsp_ctnr2_monit_pfir_lwb;
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 <= pos_calc_dsp_ctnr2_monit_pfir_lwb_s0;
      pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 <= pos_calc_dsp_ctnr2_monit_pfir_lwb_s1;
      if ((pos_calc_dsp_ctnr2_monit_pfir_lwb_s1 = '1') and (pos_calc_dsp_ctnr2_monit_pfir_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr2_monit_pfir_int <= regs_i.dsp_ctnr2_monit_pfir_i;
      end if;
    end if;
  end process;
  
  
-- Monit. 0.1 Hz incorrect counter for channels 0/1/2/3 (multiplexed)
-- asynchronous std_logic_vector register : Monit. 0.1 Hz incorrect counter for channels 0/1/2/3 (multiplexed) (type RO/WO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 <= '0';
      pos_calc_dsp_ctnr2_monit_fir_01_int <= "0000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb;
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_s0;
      pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 <= pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1;
      if ((pos_calc_dsp_ctnr2_monit_fir_01_lwb_s1 = '1') and (pos_calc_dsp_ctnr2_monit_fir_01_lwb_s2 = '0')) then
        pos_calc_dsp_ctnr2_monit_fir_01_int <= regs_i.dsp_ctnr2_monit_fir_01_i;
      end if;
    end if;
  end process;
  
  
-- Clear TBT error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.dsp_err_clr_tbt_o <= '0';
      pos_calc_dsp_err_clr_tbt_sync0 <= '0';
      pos_calc_dsp_err_clr_tbt_sync1 <= '0';
      pos_calc_dsp_err_clr_tbt_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_tbt_sync0 <= pos_calc_dsp_err_clr_tbt_int;
      pos_calc_dsp_err_clr_tbt_sync1 <= pos_calc_dsp_err_clr_tbt_sync0;
      pos_calc_dsp_err_clr_tbt_sync2 <= pos_calc_dsp_err_clr_tbt_sync1;
      regs_o.dsp_err_clr_tbt_o <= pos_calc_dsp_err_clr_tbt_sync2 and (not pos_calc_dsp_err_clr_tbt_sync1);
    end if;
  end process;
  
  
-- Clear FOFB error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.dsp_err_clr_fofb_o <= '0';
      pos_calc_dsp_err_clr_fofb_sync0 <= '0';
      pos_calc_dsp_err_clr_fofb_sync1 <= '0';
      pos_calc_dsp_err_clr_fofb_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_fofb_sync0 <= pos_calc_dsp_err_clr_fofb_int;
      pos_calc_dsp_err_clr_fofb_sync1 <= pos_calc_dsp_err_clr_fofb_sync0;
      pos_calc_dsp_err_clr_fofb_sync2 <= pos_calc_dsp_err_clr_fofb_sync1;
      regs_o.dsp_err_clr_fofb_o <= pos_calc_dsp_err_clr_fofb_sync2 and (not pos_calc_dsp_err_clr_fofb_sync1);
    end if;
  end process;
  
  
-- Clear Monit. CIC and CFIR error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.dsp_err_clr_monit_part1_o <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync0 <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync1 <= '0';
      pos_calc_dsp_err_clr_monit_part1_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_monit_part1_sync0 <= pos_calc_dsp_err_clr_monit_part1_int;
      pos_calc_dsp_err_clr_monit_part1_sync1 <= pos_calc_dsp_err_clr_monit_part1_sync0;
      pos_calc_dsp_err_clr_monit_part1_sync2 <= pos_calc_dsp_err_clr_monit_part1_sync1;
      regs_o.dsp_err_clr_monit_part1_o <= pos_calc_dsp_err_clr_monit_part1_sync2 and (not pos_calc_dsp_err_clr_monit_part1_sync1);
    end if;
  end process;
  
  
-- Clear Monit. PFIR and Monit. 0.1 error counters
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.dsp_err_clr_monit_part2_o <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync0 <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync1 <= '0';
      pos_calc_dsp_err_clr_monit_part2_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dsp_err_clr_monit_part2_sync0 <= pos_calc_dsp_err_clr_monit_part2_int;
      pos_calc_dsp_err_clr_monit_part2_sync1 <= pos_calc_dsp_err_clr_monit_part2_sync0;
      pos_calc_dsp_err_clr_monit_part2_sync2 <= pos_calc_dsp_err_clr_monit_part2_sync1;
      regs_o.dsp_err_clr_monit_part2_o <= pos_calc_dsp_err_clr_monit_part2_sync2 and (not pos_calc_dsp_err_clr_monit_part2_sync1);
    end if;
  end process;
  
  
-- Valid signal for channel 0 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.dds_cfg_valid_ch0_o <= '0';
      pos_calc_dds_cfg_valid_ch0_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch0_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch0_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch0_sync0 <= pos_calc_dds_cfg_valid_ch0_int;
      pos_calc_dds_cfg_valid_ch0_sync1 <= pos_calc_dds_cfg_valid_ch0_sync0;
      pos_calc_dds_cfg_valid_ch0_sync2 <= pos_calc_dds_cfg_valid_ch0_sync1;
      regs_o.dds_cfg_valid_ch0_o <= pos_calc_dds_cfg_valid_ch0_sync2 and (not pos_calc_dds_cfg_valid_ch0_sync1);
    end if;
  end process;
  
  
-- Reserved
-- Valid signal for channel 1 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.dds_cfg_valid_ch1_o <= '0';
      pos_calc_dds_cfg_valid_ch1_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch1_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch1_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch1_sync0 <= pos_calc_dds_cfg_valid_ch1_int;
      pos_calc_dds_cfg_valid_ch1_sync1 <= pos_calc_dds_cfg_valid_ch1_sync0;
      pos_calc_dds_cfg_valid_ch1_sync2 <= pos_calc_dds_cfg_valid_ch1_sync1;
      regs_o.dds_cfg_valid_ch1_o <= pos_calc_dds_cfg_valid_ch1_sync2 and (not pos_calc_dds_cfg_valid_ch1_sync1);
    end if;
  end process;
  
  
-- Reserved
-- Valid signal for channel 2 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.dds_cfg_valid_ch2_o <= '0';
      pos_calc_dds_cfg_valid_ch2_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch2_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch2_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch2_sync0 <= pos_calc_dds_cfg_valid_ch2_int;
      pos_calc_dds_cfg_valid_ch2_sync1 <= pos_calc_dds_cfg_valid_ch2_sync0;
      pos_calc_dds_cfg_valid_ch2_sync2 <= pos_calc_dds_cfg_valid_ch2_sync1;
      regs_o.dds_cfg_valid_ch2_o <= pos_calc_dds_cfg_valid_ch2_sync2 and (not pos_calc_dds_cfg_valid_ch2_sync1);
    end if;
  end process;
  
  
-- Reserved
-- Valid signal for channel 3 DDS
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      regs_o.dds_cfg_valid_ch3_o <= '0';
      pos_calc_dds_cfg_valid_ch3_sync0 <= '0';
      pos_calc_dds_cfg_valid_ch3_sync1 <= '0';
      pos_calc_dds_cfg_valid_ch3_sync2 <= '0';
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_cfg_valid_ch3_sync0 <= pos_calc_dds_cfg_valid_ch3_int;
      pos_calc_dds_cfg_valid_ch3_sync1 <= pos_calc_dds_cfg_valid_ch3_sync0;
      pos_calc_dds_cfg_valid_ch3_sync2 <= pos_calc_dds_cfg_valid_ch3_sync1;
      regs_o.dds_cfg_valid_ch3_o <= pos_calc_dds_cfg_valid_ch3_sync2 and (not pos_calc_dds_cfg_valid_ch3_sync1);
    end if;
  end process;
  
  
-- Reserved
-- DDS phase increment parameter register for channel 0
-- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 0 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dds_pinc_ch0_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch0_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch0_val_swb_s2 <= '0';
      regs_o.dds_pinc_ch0_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch0_val_swb_s0 <= pos_calc_dds_pinc_ch0_val_swb;
      pos_calc_dds_pinc_ch0_val_swb_s1 <= pos_calc_dds_pinc_ch0_val_swb_s0;
      pos_calc_dds_pinc_ch0_val_swb_s2 <= pos_calc_dds_pinc_ch0_val_swb_s1;
      if ((pos_calc_dds_pinc_ch0_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch0_val_swb_s1 = '1')) then
        regs_o.dds_pinc_ch0_val_o <= pos_calc_dds_pinc_ch0_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- DDS phase increment parameter register for channel 1
-- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 1 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dds_pinc_ch1_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch1_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch1_val_swb_s2 <= '0';
      regs_o.dds_pinc_ch1_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch1_val_swb_s0 <= pos_calc_dds_pinc_ch1_val_swb;
      pos_calc_dds_pinc_ch1_val_swb_s1 <= pos_calc_dds_pinc_ch1_val_swb_s0;
      pos_calc_dds_pinc_ch1_val_swb_s2 <= pos_calc_dds_pinc_ch1_val_swb_s1;
      if ((pos_calc_dds_pinc_ch1_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch1_val_swb_s1 = '1')) then
        regs_o.dds_pinc_ch1_val_o <= pos_calc_dds_pinc_ch1_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- DDS phase increment parameter register for channel 2
-- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 2 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dds_pinc_ch2_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch2_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch2_val_swb_s2 <= '0';
      regs_o.dds_pinc_ch2_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch2_val_swb_s0 <= pos_calc_dds_pinc_ch2_val_swb;
      pos_calc_dds_pinc_ch2_val_swb_s1 <= pos_calc_dds_pinc_ch2_val_swb_s0;
      pos_calc_dds_pinc_ch2_val_swb_s2 <= pos_calc_dds_pinc_ch2_val_swb_s1;
      if ((pos_calc_dds_pinc_ch2_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch2_val_swb_s1 = '1')) then
        regs_o.dds_pinc_ch2_val_o <= pos_calc_dds_pinc_ch2_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- DDS phase increment parameter register for channel 3
-- asynchronous std_logic_vector register : DDS phase increment parameter register for channel 3 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dds_pinc_ch3_val_swb_s0 <= '0';
      pos_calc_dds_pinc_ch3_val_swb_s1 <= '0';
      pos_calc_dds_pinc_ch3_val_swb_s2 <= '0';
      regs_o.dds_pinc_ch3_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_pinc_ch3_val_swb_s0 <= pos_calc_dds_pinc_ch3_val_swb;
      pos_calc_dds_pinc_ch3_val_swb_s1 <= pos_calc_dds_pinc_ch3_val_swb_s0;
      pos_calc_dds_pinc_ch3_val_swb_s2 <= pos_calc_dds_pinc_ch3_val_swb_s1;
      if ((pos_calc_dds_pinc_ch3_val_swb_s2 = '0') and (pos_calc_dds_pinc_ch3_val_swb_s1 = '1')) then
        regs_o.dds_pinc_ch3_val_o <= pos_calc_dds_pinc_ch3_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- DDS phase offset parameter register for channel 0
-- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 0 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dds_poff_ch0_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch0_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch0_val_swb_s2 <= '0';
      regs_o.dds_poff_ch0_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch0_val_swb_s0 <= pos_calc_dds_poff_ch0_val_swb;
      pos_calc_dds_poff_ch0_val_swb_s1 <= pos_calc_dds_poff_ch0_val_swb_s0;
      pos_calc_dds_poff_ch0_val_swb_s2 <= pos_calc_dds_poff_ch0_val_swb_s1;
      if ((pos_calc_dds_poff_ch0_val_swb_s2 = '0') and (pos_calc_dds_poff_ch0_val_swb_s1 = '1')) then
        regs_o.dds_poff_ch0_val_o <= pos_calc_dds_poff_ch0_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- DDS phase offset parameter register for channel 1
-- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 1 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dds_poff_ch1_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch1_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch1_val_swb_s2 <= '0';
      regs_o.dds_poff_ch1_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch1_val_swb_s0 <= pos_calc_dds_poff_ch1_val_swb;
      pos_calc_dds_poff_ch1_val_swb_s1 <= pos_calc_dds_poff_ch1_val_swb_s0;
      pos_calc_dds_poff_ch1_val_swb_s2 <= pos_calc_dds_poff_ch1_val_swb_s1;
      if ((pos_calc_dds_poff_ch1_val_swb_s2 = '0') and (pos_calc_dds_poff_ch1_val_swb_s1 = '1')) then
        regs_o.dds_poff_ch1_val_o <= pos_calc_dds_poff_ch1_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- DDS phase offset parameter register for channel 2
-- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 2 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dds_poff_ch2_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch2_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch2_val_swb_s2 <= '0';
      regs_o.dds_poff_ch2_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch2_val_swb_s0 <= pos_calc_dds_poff_ch2_val_swb;
      pos_calc_dds_poff_ch2_val_swb_s1 <= pos_calc_dds_poff_ch2_val_swb_s0;
      pos_calc_dds_poff_ch2_val_swb_s2 <= pos_calc_dds_poff_ch2_val_swb_s1;
      if ((pos_calc_dds_poff_ch2_val_swb_s2 = '0') and (pos_calc_dds_poff_ch2_val_swb_s1 = '1')) then
        regs_o.dds_poff_ch2_val_o <= pos_calc_dds_poff_ch2_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- DDS phase offset parameter register for channel 3
-- asynchronous std_logic_vector register : DDS phase offset parameter register for channel 3 (type RW/RO, fs_clk2x_i <-> clk_sys_i)
  process (fs_clk2x_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dds_poff_ch3_val_swb_s0 <= '0';
      pos_calc_dds_poff_ch3_val_swb_s1 <= '0';
      pos_calc_dds_poff_ch3_val_swb_s2 <= '0';
      regs_o.dds_poff_ch3_val_o <= "000000000000000000000000000000";
    elsif rising_edge(fs_clk2x_i) then
      pos_calc_dds_poff_ch3_val_swb_s0 <= pos_calc_dds_poff_ch3_val_swb;
      pos_calc_dds_poff_ch3_val_swb_s1 <= pos_calc_dds_poff_ch3_val_swb_s0;
      pos_calc_dds_poff_ch3_val_swb_s2 <= pos_calc_dds_poff_ch3_val_swb_s1;
      if ((pos_calc_dds_poff_ch3_val_swb_s2 = '0') and (pos_calc_dds_poff_ch3_val_swb_s1 = '1')) then
        regs_o.dds_poff_ch3_val_o <= pos_calc_dds_poff_ch3_val_int;
      end if;
    end if;
  end process;
  
  
-- Reserved
-- Monit. Amplitude Value for channel 0
-- asynchronous std_logic_vector register : Monit. Amplitude Value for channel 0 (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_monit_amp_ch0_lwb_s0 <= '0';
      pos_calc_dsp_monit_amp_ch0_lwb_s1 <= '0';
      pos_calc_dsp_monit_amp_ch0_lwb_s2 <= '0';
      pos_calc_dsp_monit_amp_ch0_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
      pos_calc_dsp_monit_amp_ch0_lwb_s0 <= pos_calc_dsp_monit_amp_ch0_lwb;
      pos_calc_dsp_monit_amp_ch0_lwb_s1 <= pos_calc_dsp_monit_amp_ch0_lwb_s0;
      pos_calc_dsp_monit_amp_ch0_lwb_s2 <= pos_calc_dsp_monit_amp_ch0_lwb_s1;
      if ((pos_calc_dsp_monit_amp_ch0_lwb_s1 = '1') and (pos_calc_dsp_monit_amp_ch0_lwb_s2 = '0')) then
        pos_calc_dsp_monit_amp_ch0_int <= regs_i.dsp_monit_amp_ch0_i;
      end if;
    end if;
  end process;
  
  
-- Monit. Amplitude Value for channel 1
-- asynchronous std_logic_vector register : Monit. Amplitude Value for channel 1 (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_monit_amp_ch1_lwb_s0 <= '0';
      pos_calc_dsp_monit_amp_ch1_lwb_s1 <= '0';
      pos_calc_dsp_monit_amp_ch1_lwb_s2 <= '0';
      pos_calc_dsp_monit_amp_ch1_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
      pos_calc_dsp_monit_amp_ch1_lwb_s0 <= pos_calc_dsp_monit_amp_ch1_lwb;
      pos_calc_dsp_monit_amp_ch1_lwb_s1 <= pos_calc_dsp_monit_amp_ch1_lwb_s0;
      pos_calc_dsp_monit_amp_ch1_lwb_s2 <= pos_calc_dsp_monit_amp_ch1_lwb_s1;
      if ((pos_calc_dsp_monit_amp_ch1_lwb_s1 = '1') and (pos_calc_dsp_monit_amp_ch1_lwb_s2 = '0')) then
        pos_calc_dsp_monit_amp_ch1_int <= regs_i.dsp_monit_amp_ch1_i;
      end if;
    end if;
  end process;
  
  
-- Monit. Amplitude Value for channel 2
-- asynchronous std_logic_vector register : Monit. Amplitude Value for channel 2 (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_monit_amp_ch2_lwb_s0 <= '0';
      pos_calc_dsp_monit_amp_ch2_lwb_s1 <= '0';
      pos_calc_dsp_monit_amp_ch2_lwb_s2 <= '0';
      pos_calc_dsp_monit_amp_ch2_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
      pos_calc_dsp_monit_amp_ch2_lwb_s0 <= pos_calc_dsp_monit_amp_ch2_lwb;
      pos_calc_dsp_monit_amp_ch2_lwb_s1 <= pos_calc_dsp_monit_amp_ch2_lwb_s0;
      pos_calc_dsp_monit_amp_ch2_lwb_s2 <= pos_calc_dsp_monit_amp_ch2_lwb_s1;
      if ((pos_calc_dsp_monit_amp_ch2_lwb_s1 = '1') and (pos_calc_dsp_monit_amp_ch2_lwb_s2 = '0')) then
        pos_calc_dsp_monit_amp_ch2_int <= regs_i.dsp_monit_amp_ch2_i;
      end if;
    end if;
  end process;
  
  
-- Monit. Amplitude Value for channel 3
-- asynchronous std_logic_vector register : Monit. Amplitude Value for channel 3 (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_monit_amp_ch3_lwb_s0 <= '0';
      pos_calc_dsp_monit_amp_ch3_lwb_s1 <= '0';
      pos_calc_dsp_monit_amp_ch3_lwb_s2 <= '0';
      pos_calc_dsp_monit_amp_ch3_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
      pos_calc_dsp_monit_amp_ch3_lwb_s0 <= pos_calc_dsp_monit_amp_ch3_lwb;
      pos_calc_dsp_monit_amp_ch3_lwb_s1 <= pos_calc_dsp_monit_amp_ch3_lwb_s0;
      pos_calc_dsp_monit_amp_ch3_lwb_s2 <= pos_calc_dsp_monit_amp_ch3_lwb_s1;
      if ((pos_calc_dsp_monit_amp_ch3_lwb_s1 = '1') and (pos_calc_dsp_monit_amp_ch3_lwb_s2 = '0')) then
        pos_calc_dsp_monit_amp_ch3_int <= regs_i.dsp_monit_amp_ch3_i;
      end if;
    end if;
  end process;
  
  
-- Monit. X Position Value
-- asynchronous std_logic_vector register : Monit. X Position Value (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_monit_pos_x_lwb_s0 <= '0';
      pos_calc_dsp_monit_pos_x_lwb_s1 <= '0';
      pos_calc_dsp_monit_pos_x_lwb_s2 <= '0';
      pos_calc_dsp_monit_pos_x_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
      pos_calc_dsp_monit_pos_x_lwb_s0 <= pos_calc_dsp_monit_pos_x_lwb;
      pos_calc_dsp_monit_pos_x_lwb_s1 <= pos_calc_dsp_monit_pos_x_lwb_s0;
      pos_calc_dsp_monit_pos_x_lwb_s2 <= pos_calc_dsp_monit_pos_x_lwb_s1;
      if ((pos_calc_dsp_monit_pos_x_lwb_s1 = '1') and (pos_calc_dsp_monit_pos_x_lwb_s2 = '0')) then
        pos_calc_dsp_monit_pos_x_int <= regs_i.dsp_monit_pos_x_i;
      end if;
    end if;
  end process;
  
  
-- Monit. Y Position Value
-- asynchronous std_logic_vector register : Monit. Y Position Value (type RO/WO, fs_clk_i <-> clk_sys_i)
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_monit_pos_y_lwb_s0 <= '0';
      pos_calc_dsp_monit_pos_y_lwb_s1 <= '0';
      pos_calc_dsp_monit_pos_y_lwb_s2 <= '0';
      pos_calc_dsp_monit_pos_y_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
      pos_calc_dsp_monit_pos_y_lwb_s0 <= pos_calc_dsp_monit_pos_y_lwb;
      pos_calc_dsp_monit_pos_y_lwb_s1 <= pos_calc_dsp_monit_pos_y_lwb_s0;
      pos_calc_dsp_monit_pos_y_lwb_s2 <= pos_calc_dsp_monit_pos_y_lwb_s1;
      if ((pos_calc_dsp_monit_pos_y_lwb_s1 = '1') and (pos_calc_dsp_monit_pos_y_lwb_s2 = '0')) then
        pos_calc_dsp_monit_pos_y_int <= regs_i.dsp_monit_pos_y_i;
      end if;
    end if;
  end process;
  
  
-- Monit. Q Position Value
-- asynchronous std_logic_vector register : Monit. Q Position Value (type RO/WO, fs_clk_i <-> clk_sys_i)
  --process (fs_clk_i, rst_n_i)
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_monit_pos_q_lwb_s0 <= '0';
      pos_calc_dsp_monit_pos_q_lwb_s1 <= '0';
      pos_calc_dsp_monit_pos_q_lwb_s2 <= '0';
      pos_calc_dsp_monit_pos_q_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
      pos_calc_dsp_monit_pos_q_lwb_s0 <= pos_calc_dsp_monit_pos_q_lwb;
      pos_calc_dsp_monit_pos_q_lwb_s1 <= pos_calc_dsp_monit_pos_q_lwb_s0;
      pos_calc_dsp_monit_pos_q_lwb_s2 <= pos_calc_dsp_monit_pos_q_lwb_s1;
      if ((pos_calc_dsp_monit_pos_q_lwb_s1 = '1') and (pos_calc_dsp_monit_pos_q_lwb_s2 = '0')) then
        pos_calc_dsp_monit_pos_q_int <= regs_i.dsp_monit_pos_q_i;
      end if;
    end if;
  end process;
  
  
-- Monit. Sum Position Value
-- asynchronous std_logic_vector register : Monit. Sum Position Value (type RO/WO, fs_clk_i <-> clk_sys_i)
--  process (fs_clk_i, rst_n_i)
  process (clk_sys_i, rst_n_i)
  begin
    if (rst_n_i = '0') then 
      pos_calc_dsp_monit_pos_sum_lwb_s0 <= '0';
      pos_calc_dsp_monit_pos_sum_lwb_s1 <= '0';
      pos_calc_dsp_monit_pos_sum_lwb_s2 <= '0';
      pos_calc_dsp_monit_pos_sum_int <= "00000000000000000000000000000000";
    elsif rising_edge(clk_sys_i) then
      pos_calc_dsp_monit_pos_sum_lwb_s0 <= pos_calc_dsp_monit_pos_sum_lwb;
      pos_calc_dsp_monit_pos_sum_lwb_s1 <= pos_calc_dsp_monit_pos_sum_lwb_s0;
      pos_calc_dsp_monit_pos_sum_lwb_s2 <= pos_calc_dsp_monit_pos_sum_lwb_s1;
      if ((pos_calc_dsp_monit_pos_sum_lwb_s1 = '1') and (pos_calc_dsp_monit_pos_sum_lwb_s2 = '0')) then
        pos_calc_dsp_monit_pos_sum_int <= regs_i.dsp_monit_pos_sum_i;
      end if;
    end if;
  end process;
  
  
  rwaddr_reg <= wb_adr_i;
  wb_stall_o <= (not ack_sreg(0)) and (wb_stb_i and wb_cyc_i);
-- ACK signal generation. Just pass the LSB of ACK counter.
  wb_ack_o <= ack_sreg(0);
end syn;
