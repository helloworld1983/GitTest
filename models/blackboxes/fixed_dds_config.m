
function fixed_dds_config(this_block)

  % Revision History:
  %
  %   08-Mar-2014  (15:32 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     D:\Sysgen_projects\dsp-cores-devel\models\blackboxes\fixed_dds.vhd
  %
  %

  this_block.setTopLevelLanguage('VHDL');

  this_block.setEntityName('fixed_dds');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  %this_block.tagAsCombinational;

  this_block.addSimulinkInport('rst_n_i');

  this_block.addSimulinkOutport('sin_o');
  this_block.addSimulinkOutport('cos_o');


  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('rst_n_i').width ~= 1);
      this_block.setError('Input data type for port "rst_n_i" must have width=1.');
    end

    this_block.port('rst_n_i').useHDLVector(false);

    this_block.port('sin_o').setType('Fix_24_22');
  % (!) Port 'sin_o' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
    if (this_block.port('sin_o').width ~= 24);
      this_block.setError('Output data type for port "sin_o" must have width=24.');
    end

    %this_block.port('sin_o').setType('Fix_16_0');
    
    this_block.port('cos_o').setType('Fix_24_22');
  % (!) Port 'cos_o' appeared to have dynamic type in the HDL
  % --- you must add an appropriate type setting for this port
    if (this_block.port('cos_o').width ~= 24);
      this_block.setError('Output data type for port "cos_o" must have width=24.');
    end

    %this_block.port('cos_o').setType('Fix_16_0');
  
  end  % if(inputTypesKnown)
  % -----------------------------

  % -----------------------------
   if (this_block.inputRatesKnown)
     setup_as_single_rate(this_block,'clk_i','ce_i')
   end  % if(inputRatesKnown)
  % -----------------------------

  %    Set the inout port rate to be the same as the first input 
  %     rate. Change the following code if this is untrue.
  uniqueInputRates = unique(this_block.getInputRates);

  %simulink_block = this_block.blockName; 
  %number_of_points = get_param(simulink_block,'number_of_points'); 
  %this_block.addGeneric('g_number_of_points', 'natural', number_of_points); 
  
  %output_width = get_param(simulink_block,'output_width'); 
  %this_block.addGeneric('g_output_width', 'natural', output_width); 
  
  %dither = get_param(simulink_block,'dither'); 
  %this_block.addGeneric('g_dither', 'boolean', dither); 
  
  %sin_file = get_param(simulink_block,'sin_file'); 
  %this_block.addGeneric('g_sin_file', 'string', sin_file); 
  
  %cos_file = get_param(simulink_block,'cos_file'); 
  %this_block.addGeneric('g_cos_file', 'string', cos_file); 
  
  %     Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('g_number_of_points','natural','148');
  this_block.addGeneric('g_output_width','natural','24');
  this_block.addGeneric('g_dither','boolean','false');
  this_block.addGeneric('g_sin_file','string','"../../../ip_cores/dsp-cores/hdl/modules/position_calc/dds_lut/dds_sin.ram"');
  this_block.addGeneric('g_cos_file','string','"../../../ip_cores/dsp-cores/hdl/modules/position_calc/dds_lut/dds_cos.ram"');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('blackboxes/lut_sweep.vhd');
  this_block.addFile('blackboxes/fixed_dds.vhd');

return;


% ------------------------------------------------------------

function setup_as_single_rate(block,clkname,cename) 
  inputRates = block.inputRates; 
  uniqueInputRates = unique(inputRates); 
  if (length(uniqueInputRates)==1 & uniqueInputRates(1)==Inf) 
    block.addError('The inputs to this block cannot all be constant.'); 
    return; 
  end 
  if (uniqueInputRates(end) == Inf) 
     hasConstantInput = true; 
     uniqueInputRates = uniqueInputRates(1:end-1); 
  end 
  if (length(uniqueInputRates) ~= 1) 
    block.addError('The inputs to this block must run at a single rate.'); 
    return; 
  end 
  theInputRate = uniqueInputRates(1); 
  for i = 1:block.numSimulinkOutports 
     block.outport(i).setRate(theInputRate); 
  end 
  block.addClkCEPair(clkname,cename,theInputRate); 
  return; 

% ------------------------------------------------------------

